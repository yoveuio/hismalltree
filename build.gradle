import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id("org.springframework.boot") version "3.0.6" apply false
    id("io.spring.dependency-management") version "1.1.0" apply false
    id("org.jetbrains.kotlin.jvm") version "1.7.22" apply false
    id("org.jetbrains.kotlin.plugin.spring") version "1.7.22" apply false
}

ext {
    javaProjects = subprojects - project(":demo-platform")
}

allprojects {
    repositories {
        mavenCentral()
    }

    group = 'com.yoveuio'
    version = '0.0.1-SNAPSHOT'

}

configure([rootProject] + javaProjects) {
    apply plugin: 'io.spring.dependency-management'
    if (project.name in ['demo-spring', 'utils']) {
        apply plugin: "kotlin"
        apply plugin: 'org.jetbrains.kotlin.jvm'
        apply plugin: 'org.jetbrains.kotlin.plugin.spring'


        [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
        [compileJava, compileTestJava]*.sourceCompatibility = JavaVersion.VERSION_17
        [compileJava, compileTestJava]*.targetCompatibility = JavaVersion.VERSION_17

        tasks.withType(KotlinCompile).configureEach {
            kotlinOptions {
                freeCompilerArgs = ['-Xjsr305=strict']
                jvmTarget = '17'
            }
        }

        tasks.register('prepareKotlinBuildScriptModel') {

        }
    }

    if(project.name.contains('spring')) {
        apply plugin: 'org.springframework.boot'
    }

    if(project.name.contains("scala")) {
        apply plugin: 'scala'

        sourceSets {
            main {
                scala {
                    srcDirs = ['src/main/scala', 'src/main/java']
                }
                java {
                    srcDirs = []
                }
            }

            test {
                scala {
                    srcDirs = ['src/test/scala', 'src/test/java']
                }
                java {
                    srcDirs = []
                }
            }
        }

    }

    configurations {
        dependencyManagement {
            canBeConsumed = false
            canBeResolved = false
            visible = false
        }
        matching { it.name.endsWith("Classpath") }.configureEach { it.extendsFrom(dependencyManagement) }
    }

    dependencies {
        dependencyManagement(enforcedPlatform(dependencies.project(path: ":demo-platform")))
    }

}
